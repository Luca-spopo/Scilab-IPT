/*

Author: Anirudh Katoch
katoch.anirudh(at)gmail.com



TODO:
-getTextSize and threshold return 2 variables. Support returning multiple variables
-Do not generate select case if function not overloaded
-montage
-More helpful error messages than error(42)


NOTE: The usage mentioned here is outdated. Please refer to input.txt for updated instructions

USAGE
e.g.

:a 0 b 0 0 1 0

function res = a(varargin)
	select length(varargin)
		case 4 then
			res = b(varargin(1), varargin(2), mat2il(varargin(3)), varargin(4))
		else
			error(39)
	end
endfunction

FUNCTION OVERLOADING:

e.g.

:x 0 y 0 0 1 0
   1 z 1 0

function res = x(varargin)
	select length(varargin)
		case 4 then
			res = y(varargin(1), varargin(2), mat2il(varargin(3)), varargin(4))
		case 2 then
			res = il2mat(z(mat2il(varargin(1)), varargin(2)))
		else
			error(39)
	end
endfunction


-expects a folder called "output" to be present in current directory. Does not print error messages.

This is currently very hacky and badly coded.
//TODO: Redo the whole thing

*/



#include<iostream>
#include<cstring>
#include<fstream>

using namespace std;

//Edit these to modify this program to work with other boxing/unboxing functions.
const char MAT2IL[] = "mat2il";
const char IL2MAT[] = "il2mat";



char* genArg(char* s, int k, int wrap = 0, int first = 0)
{
	strcpy(s, "");
	if(!first)
		strcat(s, ", ");
	if(wrap)
	{
		strcat(s, MAT2IL);
		strcat(s, "(");
	}
	strcat(s, "varargin(");
	int i;
	for(i=0; s[i]; i++);
	s[i] = '0'+k/10;
	s[i+1] = '0'+k%10;
	s[i+2] = ')';
	s[i+3] = 0;
	if(wrap)
	{
		strcat(s, ")");
	}
	return s;
}

/*
case 3 then
	res = il2mat(z(mat2il(varargin(1)), varargin(2), varargin(3)));
*/

char* genCase(char* s, int ret_wrap, const char* oldfun, const char* params, int isOctave)
{
	
	int case_no=0;
	char* ptr = (char*)params;
	while(*ptr!='\n' && *ptr!=0)
	{
		if(*ptr <= '9' && *ptr >= '0')
		{
			case_no++;
		}
		ptr++;
	}

	strcpy(s, "\n\t\tcase ");
	s[8] = '0'+case_no/10;
	s[9] = '0'+case_no%10;
	s[10] = 0;
	strcat(s, " then\n\t\t\tres = ");
	if(ret_wrap)
	{
		strcat(s, IL2MAT);
		strcat(s, "(");
	}
	if(!isOctave)
	{
		strcat(s, oldfun);
		strcat(s, "(");
	}
	else
	{
		strcat(s, "callOctave(\"");
		strcat(s, oldfun);
		strcat(s, "\", ");
	}
	int cur_par = 1;
	char temp[50];
	ptr = (char*)params;
	while(*ptr!='\n' && *ptr!=0)
	{
		if(*ptr <= '9' && *ptr >= '0')
		{
			strcat(s, genArg(temp, cur_par++, *ptr-'0', cur_par==1));
		}
		ptr++;
	}
	strcat(s, ")");
	if(ret_wrap)
		strcat(s, ")");
	return s;
}


/*
function res = x(varargin)
	select length(varargin)
		case 4 then
			res = y(mat2il(varargin(1)), mat2il(varargin(2)), varargin(3), mat2il(varargin(4)))
		case 3 then
			res = il2mat(z(mat2il(varargin(1)), varargin(2), varargin(3)))
		else
			error(39);
	end
endfunction

:x
0 y 1 1 0 1
1 z 1 0 0

*/

int genFun(ifstream &fin, char* output_folder)
{

	while(!fin.eof() && fin.get()!=':');

	if(fin.eof())
		return 0;

	char old_name[100];
	char new_name[100];	
	char null[130];
	char cur_case[500];

	fin>>new_name;

	strcpy(null, output_folder);
	strcat(null, new_name);
	strcat(null, ".sci");
	ofstream fout(null);
	fout<<"//Function migration (image list to matrix) for: "<<new_name<<"\n//Generated by migrate.cpp\n//Author: Anirudh Katoch\nfunction res = "<<new_name<<"(varargin)\n\tselect length(varargin)";
	
	while(!fin.eof() && fin.peek()!=':')
	{
		int ret, isOctave = 0;
		char temp[10];
		fin>>temp;
		isOctave = !(temp[0] - 'y');
		fin>>ret;
		char old_name[50];
		fin>>old_name;
		if(fin.eof())
			break;
		fin.getline(null, 130);
		fout<<genCase(cur_case, ret, old_name, null, isOctave);		
	}
	fout<<"\n\t\telse\n\t\t\terror(39)\n\tend\nendfunction";
	fout.close();
	if(fin.eof())
		return 0;
	return 1;
}


int main()
{
	char input_file[100];
	char output_folder[100] = "output";
	cout<<"Enter input file name: ";
	cin>>input_file;
	cout<<"Enter output folder name (must exist): ";
	cin>>output_folder;
	ifstream fin(input_file);
	strcat(output_folder, "/");
	while(1)
	{
		fin.ignore(999999 , '/');
		if(fin.peek()=='/')
		{
			fin.ignore();
			break;
		}
	}
	while(genFun(fin, output_folder));
	return 0;
}
